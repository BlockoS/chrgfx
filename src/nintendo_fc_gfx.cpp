#include "nintendo_fc_gfx.hpp"

using namespace png;

namespace chrgfx
{
// ----------------- CHR
const chr_traits nintendo_fc_cx::traits = std_2bpp_tile;

const u8 CHR_PXL_COUNT = 64;	// traits.width * traits.height

const chr_traits* nintendo_fc_cx::get_traits()
{
	return &nintendo_fc_cx::traits;
}

const chr* nintendo_fc_cx::get_chr(u8* data) { return get_chr_nes(data); }

const chr* nintendo_fc_cx::get_chr_nes(u8* data)
{
	auto _out = new chr[CHR_PXL_COUNT];
	u8 this_pxl, pxl_idx{0};

	for(u8 row = 0; row < 8; row++)
	{
		for(int8_t shift = 7; shift >= 0; shift--)
		{
			this_pxl = 0;
			if((data[row] >> shift) & 1) this_pxl |= 1;
			if((data[row + 8] >> shift) & 1) this_pxl |= 2;
			_out[pxl_idx++] = this_pxl;
		}
	}

	return _out;
}

// ----------------- PALETTES
// 32 colors, each color is 1 byte; 8 palettes, 4 colors each (color 0 is always
// transparent)
const pal_traits nintendo_fc_px::traits{32, 1, 8, 4};

const pal_traits* nintendo_fc_px::get_traits() { return &traits; }

// a 'standard' 2C02 PPU palette, from:
// https://wiki.nesdev.com/w/index.php/PPU_palettes

const color nintendo_fc_px::std_fc_pal[] = {
		color(0x54, 0x54, 0x54),	// 0x00
		color(0x00, 0x1E, 0x74), color(0x08, 0x10, 0x2C), color(0x30, 0x00, 0x88),
		color(0x44, 0x00, 0x64), color(0x5C, 0x00, 0x30), color(0x54, 0x04, 0x00),
		color(0x3C, 0x18, 0x00), color(0x20, 0x2A, 0x00), color(0x08, 0x3A, 0x00),
		color(0x00, 0x40, 0x00), color(0x00, 0x3C, 0x00), color(0x00, 0x32, 0x3C),
		color(0x00, 0x00, 0x00), color(0x00, 0x00, 0x00), color(0x00, 0x00, 0x00),
		color(0x98, 0x96, 0x98),	// 0x10
		color(0x08, 0x4C, 0xC4), color(0x30, 0x32, 0xEC), color(0x5C, 0x1E, 0xE4),
		color(0x88, 0x14, 0xB0), color(0xA0, 0x14, 0x64), color(0x98, 0x22, 0x20),
		color(0x78, 0x3C, 0x00), color(0x54, 0x5A, 0x00), color(0x28, 0x72, 0x00),
		color(0x08, 0x7C, 0x00), color(0x00, 0x76, 0x28), color(0x00, 0x66, 0x78),
		color(0x00, 0x00, 0x00), color(0x00, 0x00, 0x00), color(0x00, 0x00, 0x00),
		color(0xEC, 0xEE, 0xEC),	// 0x20
		color(0x4C, 0x9A, 0xEC), color(0x78, 0x7C, 0xEC), color(0xB0, 0x62, 0xEC),
		color(0xE4, 0x54, 0xEC), color(0xEC, 0x58, 0xB4), color(0xEC, 0x6A, 0x64),
		color(0xD4, 0x88, 0x20), color(0xA0, 0xAA, 0x00), color(0x74, 0xC4, 0x00),
		color(0x4C, 0xD0, 0x20), color(0x38, 0xCC, 0x6C), color(0x38, 0xB4, 0xCC),
		color(0x3C, 0x3C, 0x3C), color(0x00, 0x00, 0x00), color(0x00, 0x00, 0x00),
		color(0xEC, 0xEE, 0xEC),	// 0x30
		color(0xA8, 0xCC, 0xEC), color(0xBC, 0xBC, 0xEC), color(0xD4, 0xB2, 0xEC),
		color(0xEC, 0xAE, 0xEC), color(0xEC, 0xAE, 0xD4), color(0xEC, 0xB4, 0xB0),
		color(0xE4, 0xC4, 0x90), color(0xCC, 0xD2, 0x78), color(0xB4, 0xDE, 0x78),
		color(0xA8, 0xE2, 0x90), color(0x98, 0xE2, 0xB4), color(0xA0, 0xD6, 0xE4),
		color(0xA0, 0xA2, 0xA0), color(0x00, 0x00, 0x00), color(0x00, 0x00, 0x00)};

// alt palette, from:
// http://www.thealmightyguru.com/Games/Hacking/Wiki/index.php/NES_Palette
/*
const color nintendo_fc_px::std_fc_pal[] = {
		color(0x7C, 0x7C, 0x7C),	// 0x00
		color(0x00, 0x00, 0xFC), color(0x00, 0x00, 0xBC), color(0x44, 0x28, 0xBC),
		color(0x94, 0x00, 0x84), color(0xA8, 0x00, 0x20), color(0xA8, 0x10, 0x00),
		color(0x88, 0x14, 0x00), color(0x50, 0x30, 0x00), color(0x00, 0x78, 0x00),
		color(0x00, 0x68, 0x00), color(0x00, 0x58, 0x00), color(0x00, 0x40, 0x58),
		color(0x00, 0x00, 0x00), color(0x00, 0x00, 0x00), color(0x00, 0x00, 0x00),
		color(0xBC, 0xBC, 0xBC),	// 0x10
		color(0x00, 0x78, 0xF8), color(0x00, 0x58, 0xF8), color(0x68, 0x44, 0xFC),
		color(0xD8, 0x00, 0xCC), color(0xE4, 0x00, 0x58), color(0xF8, 0x38, 0x00),
		color(0xE4, 0x5C, 0x10), color(0xAC, 0x7C, 0x00), color(0x00, 0xB8, 0x00),
		color(0x00, 0xA8, 0x00), color(0x00, 0xA8, 0x44), color(0x00, 0x88, 0x88),
		color(0x00, 0x00, 0x00), color(0x00, 0x00, 0x00), color(0x00, 0x00, 0x00),
		color(0xF8, 0xF8, 0xF8),	// 0x20
		color(0x3C, 0xBC, 0xFC), color(0x68, 0x88, 0xFC), color(0x98, 0x78, 0xF8),
		color(0xF8, 0x78, 0xF8), color(0xF8, 0x58, 0x98), color(0xF8, 0x78, 0x58),
		color(0xFC, 0xA0, 0x44), color(0xF8, 0xB8, 0x00), color(0xB8, 0xF8, 0x18),
		color(0x58, 0xD8, 0x54), color(0x58, 0xF8, 0x98), color(0x00, 0xE8, 0xD8),
		color(0x78, 0x78, 0x78), color(0x00, 0x00, 0x00), color(0x00, 0x00, 0x00),
		color(0xFC, 0xFC, 0xFC),	// 0x30
		color(0xA4, 0xE4, 0xFC), color(0xB8, 0xB8, 0xF8), color(0xD8, 0xB8, 0xF8),
		color(0xF8, 0xB8, 0xF8), color(0xF8, 0xA4, 0xC0), color(0xF0, 0xD0, 0xB0),
		color(0xFC, 0xE0, 0xA8), color(0xF8, 0xD8, 0x78), color(0xD8, 0xF8, 0x78),
		color(0xB8, 0xF8, 0xB8), color(0xB8, 0xF8, 0xD8), color(0x00, 0xFC, 0xFC),
		color(0xF8, 0xD8, 0xF8), color(0x00, 0x00, 0x00), color(0x00, 0x00, 0x00)};
*/

const color* nintendo_fc_px::get_rgb(u8* data)
{
	if(*data > 0x3f) throw std::out_of_range("Invalid Famicom palette entry");
	return &std_fc_pal[*data];
}

const palette* nintendo_fc_px::get_pal(u8* data, int8_t subpal)
{
	return chrgfx::get_pal(this, data, subpal);
}
}	// namespace chrgfx